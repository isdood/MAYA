#!/usr/bin/env python3
"""
Generate performance reports from test results.
"""

import json
from pathlib import Path
from datetime import datetime
import statistics
from typing import Dict, List, Any

def load_test_results(results_dir: str = "tests/results") -> List[Dict]:
    """Load all test results from the results directory."""
    results = []
    results_dir = Path(results_dir)
    
    for result_file in sorted(results_dir.glob("performance_test_*.json")):
        try:
            with open(result_file, 'r') as f:
                data = json.load(f)
                data["file"] = str(result_file)
                results.append(data)
        except (json.JSONDecodeError, FileNotFoundError) as e:
            print(f"Error loading {result_file}: {e}")
    
    return results

def generate_markdown_report(results: List[Dict]) -> str:
    """Generate a markdown report from test results."""
    if not results:
        return "# No test results found"
    
    latest = results[-1]  # Get most recent test
    
    report = [
        "# MAYA Monitoring Performance Report",
        f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n",
        "## System Information",
        "```",
        f"OS: {latest['system_info']['os']}",
        f"CPU Cores: {latest['system_info']['cpu_count']}",
        f"Total Memory: {latest['system_info']['total_memory_gb']} GB",
        f"Python: {latest['system_info']['python_version']}",
        f"Hostname: {latest['system_info']['hostname']}",
        "```\n"
    ]
    
    # Test Results Summary
    report.extend([
        "## Test Results Summary\n",
        "### Monitoring Overhead",
        "| Metric | Value |",
        "|--------|-------|",
    ])
    
    if "monitoring_overhead" in latest["tests"]:
        overhead = latest["tests"]["monitoring_overhead"]
        report.extend([
            f"| Test Duration | {overhead['test_duration_seconds']} seconds |",
            f"| Avg CPU Overhead | {overhead['avg_cpu_percent']:.2f}% |",
            f"| Max CPU Overhead | {overhead['max_cpu_percent']:.2f}% |",
            f"| Avg Memory Overhead | {overhead['avg_memory_mb']:.2f} MB |",
            f"| Max Memory Overhead | {overhead['max_memory_mb']:.2f} MB |\n"
        ])
    
    if "metric_collection_time" in latest["tests"]:
        collection = latest["tests"]["metric_collection_time"]
        report.extend([
            "### Metric Collection Performance",
            f"Iterations: {collection['iterations']}\n",
            "| Statistic | Time (ms) |",
            "|-----------|-----------|",
            f"| Average | {collection['avg_time_ms']:.4f} |",
            f"| Minimum | {collection['min_time_ms']:.4f} |",
            f"| Maximum | {collection['max_time_ms']:.4f} |",
            f"| 95th Percentile | {collection['p95_time_ms']:.4f} |\n"
        ])
    
    # Historical Trends (if multiple test runs)
    if len(results) > 1:
        report.extend(["## Historical Trends\n"])
        
        if all("monitoring_overhead" in r["tests"] for r in results):
            cpu_trend = [r["tests"]["monitoring_overhead"]["avg_cpu_percent"] for r in results]
            mem_trend = [r["tests"]["monitoring_overhead"]["avg_memory_mb"] for r in results]
            
            report.extend([
                "### CPU Usage Over Time\n",
                "```",
                "Test #  CPU %",
                *[f"{i+1:6d}  {cpu:.2f}" for i, cpu in enumerate(cpu_trend)],
                "```\n",
                "### Memory Usage Over Time (MB)\n",
                "```",
                "Test #  Memory",
                *[f"{i+1:6d}  {mem:.2f}" for i, mem in enumerate(mem_trend)],
                "```"
            ])
    
    report.append("\n---\n")
    report.append("*Generated by MAYA Performance Test Suite*")
    
    return "\n".join(report)

def save_report(report: str, output_file: str = "performance_report.md") -> str:
    """Save the report to a file."""
    output_path = Path("docs") / "performance" / output_file
    output_path.parent.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(report)
    
    return str(output_path)

def main():
    """Generate and save a performance report."""
    print("Loading test results...")
    results = load_test_results()
    
    if not results:
        print("No test results found. Run the performance tests first.")
        return
    
    print(f"Generating report from {len(results)} test runs...")
    report = generate_markdown_report(results)
    
    output_file = f"performance_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
    report_path = save_report(report, output_file)
    
    print(f"\nPerformance report generated: {report_path}")
    print("\nSummary:")
    print("-" * 50)
    print(report.split("## Test Results Summary")[1].split("## Historical")[0].strip())
    print("-" * 50)

if __name__ == "__main__":
    main()
