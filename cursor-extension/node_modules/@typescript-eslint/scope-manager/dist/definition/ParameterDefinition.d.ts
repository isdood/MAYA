@pattern_meta@
GLIMMER Pattern:
{
  "metadata": {
    "timestamp": "2025-06-16 08:36:04",
    "author": "isdood",
    "pattern_version": "1.0.0",
    "color": "#FF69B4"
  },
  "file_info": {
    "path": "./cursor-extension/node_modules/@typescript-eslint/scope-manager/dist/definition/ParameterDefinition.d.ts",
    "type": "ts",
    "hash": "077c1c6448561c6cbd17f25456b2cdaa10156e4a"
  }
}
@pattern_meta@

import type { TSESTree } from '@typescript-eslint/types';
import { DefinitionBase } from './DefinitionBase';
import { DefinitionType } from './DefinitionType';
declare class ParameterDefinition extends DefinitionBase<DefinitionType.Parameter, TSESTree.ArrowFunctionExpression | TSESTree.FunctionDeclaration | TSESTree.FunctionExpression | TSESTree.TSCallSignatureDeclaration | TSESTree.TSConstructorType | TSESTree.TSConstructSignatureDeclaration | TSESTree.TSDeclareFunction | TSESTree.TSEmptyBodyFunctionExpression | TSESTree.TSFunctionType | TSESTree.TSMethodSignature, null, TSESTree.BindingName> {
    /**
     * Whether the parameter definition is a part of a rest parameter.
     */
    readonly rest: boolean;
    constructor(name: TSESTree.BindingName, node: ParameterDefinition['node'], rest: boolean);
    readonly isTypeDefinition = false;
    readonly isVariableDefinition = true;
}
export { ParameterDefinition };
//# sourceMappingURL=ParameterDefinition.d.ts.map