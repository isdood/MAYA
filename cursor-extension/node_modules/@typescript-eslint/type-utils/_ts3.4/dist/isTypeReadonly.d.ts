@pattern_meta@
GLIMMER Pattern:
{
  "metadata": {
    "timestamp": "2025-06-16 08:36:04",
    "author": "isdood",
    "pattern_version": "1.0.0",
    "color": "#FF69B4"
  },
  "file_info": {
    "path": "./cursor-extension/node_modules/@typescript-eslint/type-utils/_ts3.4/dist/isTypeReadonly.d.ts",
    "type": "ts",
    "hash": "0de1e56d8ac1191725031ede7cc3e63972eebbcb"
  }
}
@pattern_meta@

import * as ts from 'typescript';
export interface ReadonlynessOptions {
    readonly treatMethodsAsReadonly?: boolean;
}
export declare const readonlynessOptionsSchema: {
    type: string;
    additionalProperties: boolean;
    properties: {
        treatMethodsAsReadonly: {
            type: string;
        };
    };
};
export declare const readonlynessOptionsDefaults: ReadonlynessOptions;
/**
 * Checks if the given type is readonly
 */
declare function isTypeReadonly(checker: ts.TypeChecker, type: ts.Type, options?: ReadonlynessOptions): boolean;
export { isTypeReadonly };
//# sourceMappingURL=isTypeReadonly.d.ts.map
