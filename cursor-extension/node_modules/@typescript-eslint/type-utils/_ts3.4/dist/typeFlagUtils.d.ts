@pattern_meta@
GLIMMER Pattern:
{
  "metadata": {
    "timestamp": "2025-06-16 08:36:04",
    "author": "isdood",
    "pattern_version": "1.0.0",
    "color": "#FF69B4"
  },
  "file_info": {
    "path": "./cursor-extension/node_modules/@typescript-eslint/type-utils/_ts3.4/dist/typeFlagUtils.d.ts",
    "type": "ts",
    "hash": "7f01e4d81f59863e15ed7c170def8d9c91975634"
  }
}
@pattern_meta@

import * as ts from 'typescript';
/**
 * Gets all of the type flags in a type, iterating through unions automatically.
 */
export declare function getTypeFlags(type: ts.Type): ts.TypeFlags;
/**
 * @param flagsToCheck The composition of one or more `ts.TypeFlags`.
 * @param isReceiver Whether the type is a receiving type (e.g. the type of a
 * called function's parameter).
 * @remarks
 * Note that if the type is a union, this function will decompose it into the
 * parts and get the flags of every union constituent. If this is not desired,
 * use the `isTypeFlag` function from tsutils.
 */
export declare function isTypeFlagSet(type: ts.Type, flagsToCheck: ts.TypeFlags, isReceiver?: boolean): boolean;
//# sourceMappingURL=typeFlagUtils.d.ts.map
