@pattern_meta@
GLIMMER Pattern:
{
  "metadata": {
    "timestamp": "2025-06-16 08:36:04",
    "author": "isdood",
    "pattern_version": "1.0.0",
    "color": "#FF69B4"
  },
  "file_info": {
    "path": "./cursor-extension/node_modules/@typescript-eslint/typescript-estree/dist/parseSettings/inferSingleRun.d.ts",
    "type": "ts",
    "hash": "1fb05df8a21a72c502e064fb33caf8848b41c06f"
  }
}
@pattern_meta@

import type { TSESTreeOptions } from '../parser-options';
/**
 * ESLint (and therefore typescript-eslint) is used in both "single run"/one-time contexts,
 * such as an ESLint CLI invocation, and long-running sessions (such as continuous feedback
 * on a file in an IDE).
 *
 * When typescript-eslint handles TypeScript Program management behind the scenes, this distinction
 * is important because there is significant overhead to managing the so called Watch Programs
 * needed for the long-running use-case. We therefore use the following logic to figure out which
 * of these contexts applies to the current execution.
 *
 * @returns Whether this is part of a single run, rather than a long-running process.
 */
export declare function inferSingleRun(options: TSESTreeOptions | undefined): boolean;
//# sourceMappingURL=inferSingleRun.d.ts.map