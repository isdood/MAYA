const std = @import("std");

// Build options that can be set via command line
const BuildOptions = struct {
    enable_profiling: bool = false,
    enable_gpu: bool = false,
};

// Parse command line options
fn parseBuildOptions(b: *std.Build) BuildOptions {
    const options = b.option(bool, "enable-profiling", "Enable profiling support") orelse false;
    const enable_gpu = b.option(bool, "enable-gpu", "Enable GPU support") orelse false;
    
    return .{
        .enable_profiling = options,
        .enable_gpu = enable_gpu,
    };
}

// Create a module for build options
fn createBuildOptionsModule(b: *std.Build, options: BuildOptions) *std.Build.Module {
    // Create a simple module with the options
    const build_options = b.addOptions();
    
    // Add our build options
    build_options.addOption(bool, "enable_profiling", options.enable_profiling);
    build_options.addOption(bool, "enable_gpu", options.enable_gpu);
    
    // Create a module with the options
    const build_options_module = b.createModule({
        .root_source_file = b.addWriteFiles().add("build_options.zig", 
            \\//! Build-time configuration options for the MAYA project
            \\//! This file is auto-generated by the build system
            \\
            \\/// Whether profiling is enabled
            \\pub const enable_profiling = " ++ 
            (if (options.enable_profiling) "true" else "false") ++ 
            ";
            \\
            \\/// Whether GPU support is enabled
            \\pub const enable_gpu = " ++ 
            (if (options.enable_gpu) "true" else "false") ++ 
            ";
            ").getFileSource("build_options.zig"),
    });
    
    return build_options_module;
}

pub fn build(b: *std.Build) void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});
    const options = parseBuildOptions(b);
    
    // Create build options module
    const build_options_module = createBuildOptionsModule(b, options);
    
    // Common module dependencies
    const neural_mod = b.createModule(.{
        .root_source_file = .{ .src_path = .{ .owner = b, .sub_path = "src/neural/mod.zig" } },
    });
    
    // Create the main executable
    const exe = b.addExecutable(.{
        .name = "test-patterns",
        .root_source_file = .{ .src_path = .{ .owner = b, .sub_path = "src/quantum_cache/test_patterns.zig" } },
        .target = target,
        .optimize = optimize,
    });
    
    // Add modules
    exe.root_module.addImport("neural", neural_mod);
    exe.root_module.addImport("build_options", build_options_module);
    
    // Create a profiling-enabled executable if requested
    if (options.enable_profiling) {
        const profile_exe = b.addExecutable(.{
            .name = "test-patterns-profile",
            .root_source_file = .{ .src_path = .{ .owner = b, .sub_path = "src/quantum_cache/test_patterns.zig" } },
            .target = target,
            .optimize = .ReleaseSafe, // Use ReleaseSafe for profiling
        });
        
        // Enable profiling options
        profile_exe.root_module.addImport("neural", neural_mod);
        profile_exe.root_module.addImport("build_options", build_options_module);
        
        // On Linux, we can use perf for detailed profiling
        if (target.getOsTag() == .linux) {
            profile_exe.strip = false; // Keep symbols for profiling
            profile_exe.red_zone = true; // Better stack traces
            profile_exe.omit_frame_pointer = false; // Needed for good stack traces
        }
        
        // Install the profiling executable
        b.installArtifact(profile_exe);
        
        // Add a run step for the profiling executable
        const profile_cmd = b.addRunArtifact(profile_exe);
        profile_cmd.step.dependOn(b.getInstallStep());
        
        if (b.args) |args| {
            profile_cmd.addArgs(args);
        }
        
        // Create a profile step
        const profile_step = b.step("profile", "Run with profiling enabled");
        profile_step.dependOn(&profile_cmd.step);
        
        // Add flamegraph generation on Linux
        if (target.getOsTag() == .linux) {
            const perf_data = b.pathJoin(&.{ b.install_prefix, "perf.data" });
            const flamegraph = b.addSystemCommand(&.{
                "perf", "record", "-g", "--call-graph=dwarf",
                "-o", perf_data,
                b.getInstallPath(.bin, "test-patterns-profile"),
            });
            
            flamegraph.step.dependOn(b.getInstallStep());
            
            const flamegraph_step = b.step("flamegraph", "Generate a flamegraph using perf");
            flamegraph_step.dependOn(&flamegraph.step);
            
            // Add a step to view the flamegraph
            const view_flamegraph = b.addSystemCommand(&.{"perf", "report", "-g", "graph,0.5,caller"});
            view_flamegraph.step.dependOn(flamegraph_step);
            
            const view_step = b.step("view-flamegraph", "View the flamegraph");
            view_step.dependOn(&view_flamegraph.step);
        }
    }
    
    // Install both executables
    b.installArtifact(exe);
    b.installArtifact(profile_exe);
    
    // Add run steps for both executables
    const run_cmd = b.addRunArtifact(exe);
    run_cmd.step.dependOn(b.getInstallStep());
    
    const profile_cmd = b.addRunArtifact(profile_exe);
    profile_cmd.step.dependOn(b.getInstallStep());
    
    // Add command line arguments if provided
    if (b.args) |args| {
        run_cmd.addArgs(args);
        profile_cmd.addArgs(args);
    }
    
    // Create standard run step
    const run_step = b.step("run", "Run the app");
    run_step.dependOn(&run_cmd.step);
    
    // Create profiling run step
    const profile_step = b.step("profile", "Run with profiling enabled");
    profile_step.dependOn(&profile_cmd.step);
    
    // Create test-patterns step for backward compatibility
    const test_patterns_step = b.step("test-patterns", "Run test patterns for QuantumCache");
    test_patterns_step.dependOn(&run_cmd.step);
    
    // Add a step to generate flamegraphs (Linux only)
    if (target.getOsTag() == .linux) {
        const flamegraph = b.addSystemCommand(&.{"perf", "record", "-g", "--call-graph=dwarf", 
            "-o", "perf.data", 
            b.getInstallPath(.bin, "test-patterns-profile")});
        
        const flamegraph_step = b.step("flamegraph", "Generate a flamegraph using perf");
        flamegraph_step.dependOn(&flamegraph.step);
        
        // Add a step to view the flamegraph
        const view_flamegraph = b.addSystemCommand(&.{"perf", "report", "-g", "graph,0.5,caller"});
        view_flamegraph.step.dependOn(flamegraph_step);
        
        const view_step = b.step("view-flamegraph", "View the flamegraph");
        view_step.dependOn(&view_flamegraph.step);
    }
}
