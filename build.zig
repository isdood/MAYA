const std = @import("std");

// Build configuration options
const Options = struct {
    enable_gpu: bool = true,
    rocm_path: ?[]const u8 = "/opt/rocm",
};

// Parse command line options
fn parseOptions(b: *std.Build) Options {
    const options = b.option(bool, "enable-gpu", "Enable GPU acceleration (default: true)") orelse true;
    const rocm_path = b.option([]const u8, "rocm-path", "Path to ROCm installation (default: /opt/rocm");
    
    return .{
        .enable_gpu = options,
        .rocm_path = rocm_path,
    };
}

pub fn build(b: *std.Build) void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});
    const options = parseOptions(b);

    // Create neural module
    const neural_mod = b.addModule("neural", .{
        .root_source_file = .{ .cwd_relative = "src/neural/mod.zig" },
    });
    
    // Add build options to the neural module
    neural_mod.addOptions("build_options", build_options);
    
    // Create a module for build options
    const build_options_module = b.createModule(.{
        .source_file = .{ 
            .path = b.pathFromRoot("src/build_options.zig"),
        },
    });
    
    // Add the build options module to the neural module
    neural_mod.addImport("build_options", build_options_module);
    
    // Generate build options file
    const build_options_file = b.addWriteFiles().add("build_options.zig", 
        \\//! Build-time configuration options for the MAYA project
        \\//! This file is generated by the build system
        \\
        \\const std = @import("std");
        \\
        \\// Build configuration options
        \\pub const options = struct {
        \\    /// Whether GPU support is enabled
        \\    pub const enable_gpu = {};
        \\};
    , .{if (options.enable_gpu) "true" else "false"});
    
    // Ensure the build_options.zig file is generated before building
    neural_mod.root_source_file = .{ 
        .path = "src/neural/mod.zig",
        .generated = &build_options_file,
    };

    // GPU module
    if (options.enable_gpu) {
        // Create a module for the GPU code
        const gpu_mod = b.addModule("gpu", .{
            .root_source_file = .{ .cwd_relative = "src/gpu/gpu.zig" },
        });
        
        // Make GPU module available to neural module
        neural_mod.addImport("gpu", gpu_mod);
        
        // Create an executable that will use the GPU code
        const gpu_exe = b.addExecutable("gpu_runner", "src/gpu/runner.zig");
        gpu_exe.setTarget(target);
        gpu_exe.setBuildMode(optimize);
        
        // Link ROCm libraries
        gpu_exe.linkSystemLibrary("hsa-runtime64");
        gpu_exe.linkSystemLibrary("amdhip64");
        gpu_exe.linkSystemLibrary("rocblas");
        gpu_exe.linkSystemLibrary("hipblas");
        gpu_exe.linkSystemLibrary("MIOpen");
        gpu_exe.linkSystemLibrary("stdc++");
        
        // Add include paths
        gpu_exe.addIncludeDir("src");
        gpu_exe.addSystemIncludeDir("/usr/include");
        if (options.rocm_path) |rocm_path| {
            gpu_exe.addSystemIncludeDir(rocm_path ++ "/include");
            gpu_exe.addLibPath(rocm_path ++ "/lib");
            gpu_exe.addRPath(rocm_path ++ "/lib");
        }
        
        // Add the GPU module to the executable
        gpu_exe.addModule("gpu", gpu_mod);
        
        // Install the executable
        b.installArtifact(gpu_exe);
        
        // Add a run step for the GPU example
        const run_gpu = b.addRunArtifact(gpu_exe);
        const run_gpu_step = b.step("run-gpu", "Run the GPU example");
        run_gpu_step.dependOn(&run_gpu.step);
    }

    // Test patterns executable
    const test_patterns = b.addExecutable("test-patterns", "src/quantum_cache/test_patterns.zig");
    test_patterns.setTarget(target);
    test_patterns.setBuildMode(optimize);
    
    // Add neural module to test patterns
    test_patterns.addModule("neural", neural_mod);
    
    // Install the test patterns executable
    b.installArtifact(test_patterns);
    
    // Create run step for test patterns
    const run_test_patterns = b.addRunArtifact(test_patterns);
    const test_patterns_step = b.step("test-patterns", "Run the test patterns");
    test_patterns_step.dependOn(&run_test_patterns.step);
    
    // Add command line arguments if provided
    if (b.args) |args| {
        run_test_patterns.addArgs(args);
    }
}
